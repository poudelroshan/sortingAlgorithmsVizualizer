{"version":3,"sources":["components/colors/Colors.js","components/bar/Bar.js","components/nav/Navbar.js","components/footer/Footer.js","algorithms/InsertionSort/InsertionSort.js","algorithms/MergeSort/MergeSort.js","algorithms/QuickSort/QuickSort.js","App.js","reportWebVitals.js","index.js"],"names":["Colors","0","1","2","3","4","5","6","7","Bar","props","barStyle","height","length","backgroundColor","color","width","className","style","Navbar","makeStyles","button","useStyles","id","Typography","gutterBottom","Slider","value","arraySize","min","step","max","onChange","event","newValue","handleArraySizeAndSpeedChange","valueLabelDisplay","aria-labelledby","Button","variant","onClick","generateNewArray","ToggleButtonGroup","algorithm","exclusive","console","log","setAlgorithm","aria-label","ToggleButton","startSorting","Footer","href","InsertionSort","array","arraySteps","colorSteps","colorKey","i","min_idx","push","slice","j","temp","fill","globalArray","globalArraySteps","globalColorSteps","mergeSortHelper","startIndex","endIndex","leftArrayStartIndex","leftArrayEndIndex","Math","floor","rightArrayStartIndex","rightArrayEndIndex","merge","writePointer","rightArrayPointer","colorKeyCopy","shiftArrayRightByOne","MergeSort","globalColorKey","quickSortHelper","pivotIndex","random","getPivotIndex","pivotElement","leftPointer","rightPointer","swap","tempColorKey","QuickSort","App","useState","setArray","setArraySteps","setColorSteps","setArraySize","currentStep","setCurrentStep","delay","setDelay","timeouts","setTimeouts","startGeneratingSteps","setStartGeneratingSteps","clearKey","blankKey","Array","sort","error","getDelay","initialize","newArray","randomArray","generateRandomArray","clearTimeouts","forEach","timeout","clearTimeout","bars","map","number","index","useEffect","arr","steps","clrSteps","generateSteps","arrayCopy","initialize_with_current_array","timeoutsArray","currStep","setTimeout","newArraySize","newDelay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8956851.chunk.js","sourcesContent":["const colorMap = {\n\tdarkSystemGray: \"rgb(28, 28, 30)\",\n\tlightSystemBlue: \"rgb(0, 122, 255)\",\n\tsystemBlue: \"rgb(10, 132, 255)\",\n\tlightSystemGreen: \"rgb(52, 199, 89)\",\n\tdarkSystemGreen: \"rgb(48, 209, 88)\",\n\ttextColor: \"white\",\n\tsortedGreen: \"rgb(48, 209, 88)\",\n\tpurple: \"#5e35b1\",\n\tpink: \"#d81b60\",\n\tred: \"red\",\n\tyellow: \"yellow\",\n\torange: \"#f44336\",\n\tteal: \"#64ffda\",\n};\n\nconst Colors = {\n\t0: colorMap[\"systemBlue\"],\n\t1: colorMap[\"yellow\"],\n\t2: colorMap[\"purple\"],\n\t3: colorMap[\"red\"],\n\t4: colorMap[\"sortedGreen\"],\n\t5: colorMap[\"pink\"],\n\t6: colorMap[\"orange\"],\n\t7: colorMap[\"teal\"],\n};\n\nexport default Colors;\n","import \"./Bar.css\";\nimport Colors from \"../colors/Colors\";\n\nconst Bar = (props) => {\n\tconst barStyle = {\n\t\theight: `${props.length * 0.65}vh`,\n\t\tbackgroundColor: Colors[props.color],\n\t\twidth: `${props.width}px`,\n\t};\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bar\" style={barStyle}>\n\t\t\t\t{props.width >= 25 ? props.length : \"\"}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Bar;\n","import { React } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport ToggleButton from \"@material-ui/core/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/core/ToggleButtonGroup\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nimport \"./Navbar.css\";\n\nconst Navbar = (props) => {\n\t// starts playing the sorting algorithm\n\tconst sortArrayHandler = () => {\n\t\tprops.startSorting();\n\t};\n\n\t// generates a new random array\n\tconst generateNewArrayHandler = () => {\n\t\tprops.generateNewArray();\n\t};\n\n\t// lets the user change size of array and speed of sorting\n\tconst handleArraySizeAndSpeedChange = (event, newValue) => {\n\t\tprops.handleArraySizeAndSpeedChange(newValue);\n\t};\n\n\t// handle changing of algorithm\n\tconst handleSortingAlgorithmChange = (event, newValue) => {\n\t\tconsole.log(`sorting algorithm changed to: ${newValue}`);\n\t\tprops.setAlgorithm(newValue);\n\t};\n\n\t// custom CSS for MUI buttons\n\tconst useStyles = makeStyles({\n\t\tbutton: {\n\t\t\tbackgroundColor: \"green\",\n\t\t\tcolor: \"#green\",\n\t\t\t\"&:hover\": {\n\t\t\t\tcolor: \"red\",\n\t\t\t},\n\t\t\t\"&:click\": {\n\t\t\t\tcolor: \"blue\",\n\t\t\t},\n\t\t},\n\t});\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<div id=\"nav-bar\">\n\t\t\t<div id=\"title\">\n\t\t\t\t<h1>Sorting Algorithm Visualizer</h1>\n\t\t\t</div>\n\t\t\t<div id=\"toolbar\">\n\t\t\t\t<div>\n\t\t\t\t\t<Typography gutterBottom>Array size & sorting speed</Typography>\n\t\t\t\t\t<Slider\n\t\t\t\t\t\tvalue={props.arraySize}\n\t\t\t\t\t\tmin={5}\n\t\t\t\t\t\tstep={5}\n\t\t\t\t\t\tmax={100}\n\t\t\t\t\t\tonChange={handleArraySizeAndSpeedChange}\n\t\t\t\t\t\tvalueLabelDisplay=\"auto\"\n\t\t\t\t\t\taria-labelledby=\"array size and sorting speed slider\"\n\t\t\t\t\t\tid=\"non-linear-slider\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{/* <Divider orientation=\"vertical\" variant=\"fullWidth\" light=\"True\" /> */}\n\t\t\t\t<div className=\"separator\" />\n\n\t\t\t\t<Button variant=\"text\" color=\"info\" onClick={generateNewArrayHandler}>\n\t\t\t\t\tGenerate New Array\n\t\t\t\t</Button>\n\n\t\t\t\t<div className=\"separator\" />\n\t\t\t\t<ToggleButtonGroup\n\t\t\t\t\tvalue={props.algorithm}\n\t\t\t\t\texclusive\n\t\t\t\t\tonChange={handleSortingAlgorithmChange}\n\t\t\t\t\taria-label=\"sorting algorithm\"\n\t\t\t\t>\n\t\t\t\t\t<ToggleButton value=\"Insertion Sort\" aria-label=\"Insertion Sort\">\n\t\t\t\t\t\tInsertion Sort\n\t\t\t\t\t</ToggleButton>\n\t\t\t\t\t<ToggleButton value=\"Merge Sort\" aria-label=\"Merge Sort\">\n\t\t\t\t\t\tMerge Sort\n\t\t\t\t\t</ToggleButton>\n\t\t\t\t\t<ToggleButton value=\"Quick Sort\" aria-label=\"Quick Sort\">\n\t\t\t\t\t\tQuick Sort\n\t\t\t\t\t</ToggleButton>\n\t\t\t\t</ToggleButtonGroup>\n\t\t\t\t<div className=\"separator\" />\n\n\t\t\t\t<Button variant=\"text\" color=\"secondary\" onClick={sortArrayHandler}>\n\t\t\t\t\tSort!\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Navbar;\n","import { React } from \"react\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\n\nimport \"./Footer.css\";\n\nconst Footer = (props) => {\n\treturn (\n\t\t<div id=\"footer\">\n\t\t\t<div>\n\t\t\t\tMade with <FavoriteIcon color=\"warning\" /> by{\" \"}\n\t\t\t\t<a href=\"https://iamroshanpoudel.com\">Roshan Poudel</a> using React.js,\n\t\t\t\tMaterial UI, and Github Pages\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Footer;\n","const BLUE = 0,\n\tYELLOW = 1,\n\tPURPLE = 2,\n\tRED = 3,\n\tPINK = 5,\n\tGREEN = 4;\n\nconst InsertionSort = (array, arraySteps, colorSteps) => {\n\tlet colorKey = [...colorSteps[0]];\n\tfor (let i = 0; i < array.length; i++) {\n\t\tlet min_idx = i;\n\t\tarraySteps.push(array.slice()); // show i as current in yellow\n\t\tcolorKey[i] = YELLOW;\n\t\tcolorSteps.push(colorKey.slice());\n\t\tfor (let j = i + 1; j < array.length; j++) {\n\t\t\tmin_idx = array[j] < array[min_idx] ? j : min_idx;\n\t\t\tarraySteps.push(array.slice()); // show j in purple\n\t\t\tcolorKey[j] = PURPLE;\n\t\t\tcolorSteps.push(colorKey.slice());\n\t\t\tcolorKey[j] = BLUE; // revert\n\t\t}\n\t\t// swap items\n\t\tarraySteps.push(array.slice()); // before swap\n\t\tcolorKey[i] = PINK;\n\t\tcolorKey[min_idx] = PINK;\n\t\tcolorSteps.push(colorKey.slice());\n\n\t\tconst temp = array[min_idx];\n\t\tarray[min_idx] = array[i];\n\t\tarray[i] = temp;\n\t\tarraySteps.push(array.slice()); // after swap\n\t\tcolorKey[i] = GREEN;\n\t\tcolorKey[min_idx] = min_idx != i ? BLUE : GREEN; // revert\n\t\tcolorSteps.push(colorKey.slice());\n\t}\n\tarraySteps.push(array.slice());\n\tcolorSteps.push(colorKey.slice().fill(4));\n};\n\nexport default InsertionSort;\n","const BLUE = 0,\n\tYELLOW = 1,\n\tPURPLE = 2,\n\tRED = 3,\n\tGREEN = 4,\n\tPINK = 5,\n\tORANGE = 6;\n\n// Global Variables\nlet globalArray = [],\n\tglobalArraySteps = [],\n\tglobalColorSteps = [];\n\nconst MergeSort = (array, arraySteps, colorSteps) => {\n\tglobalArray = array;\n\tglobalArraySteps = arraySteps;\n\tglobalColorSteps = colorSteps;\n\tmergeSortHelper(0, array.length - 1);\n};\n\nconst mergeSortHelper = (startIndex, endIndex) => {\n\tif (endIndex - startIndex <= 0) return;\n\tconst midIndex = Math.floor((endIndex - startIndex) / 2);\n\tconst leftArrayStartIndex = startIndex,\n\t\tleftArrayEndIndex = startIndex + midIndex,\n\t\trightArrayStartIndex = leftArrayEndIndex + 1,\n\t\trightArrayEndIndex = endIndex;\n\n\tmergeSortHelper(leftArrayStartIndex, leftArrayEndIndex);\n\tmergeSortHelper(rightArrayStartIndex, rightArrayEndIndex);\n\tmerge(leftArrayStartIndex, rightArrayStartIndex, rightArrayEndIndex);\n};\n\nconst merge = (\n\tleftArrayStartIndex,\n\trightArrayStartIndex,\n\trightArrayEndIndex\n) => {\n\t// Add Purple color for left array, pink for right array\n\tlet colorKey = [...globalColorSteps[0]];\n\tcolorKey.fill(PURPLE, leftArrayStartIndex, rightArrayStartIndex);\n\tcolorKey.fill(PINK, rightArrayStartIndex, rightArrayEndIndex + 1);\n\tglobalColorSteps.push(colorKey.slice());\n\tglobalArraySteps.push(globalArray.slice());\n\n\tlet writePointer = leftArrayStartIndex,\n\t\trightArrayPointer = rightArrayStartIndex;\n\twhile (\n\t\twritePointer <= rightArrayPointer &&\n\t\trightArrayPointer <= rightArrayEndIndex\n\t) {\n\t\t// Add orange color for writePointer and rightPointer\n\t\t// Orange color == items being compared\n\t\t// Other left and right array will have same color as above\n\t\tconst colorKeyCopy = colorKey.slice();\n\t\tcolorKey[writePointer] = YELLOW;\n\t\tcolorKey[rightArrayPointer] = YELLOW;\n\t\tglobalColorSteps.push(colorKey.slice());\n\t\tglobalArraySteps.push(globalArray.slice());\n\t\t// Revert the orange colors for next iteration\n\t\tcolorKey = colorKeyCopy;\n\n\t\tif (globalArray[writePointer] <= globalArray[rightArrayPointer]) {\n\t\t\t// Sorted half should be green\n\t\t\tcolorKey[writePointer] = GREEN;\n\t\t\twritePointer++;\n\t\t} else {\n\t\t\tconst temp = globalArray[rightArrayPointer];\n\t\t\tshiftArrayRightByOne(globalArray, writePointer, rightArrayPointer - 1);\n\t\t\tglobalArray[writePointer] = temp;\n\t\t\t// Item at writePointer is sorted, so green\n\t\t\tcolorKey[writePointer] = GREEN;\n\t\t\twritePointer++;\n\t\t\trightArrayPointer++;\n\t\t\tcolorKey.fill(PURPLE, writePointer, rightArrayPointer);\n\t\t}\n\t\t// Add color and steps array for current iteration\n\t\tglobalColorSteps.push(colorKey.slice());\n\t\tglobalArraySteps.push(globalArray.slice());\n\t}\n\t// At the end, add green color to signify a sorted merged array\n\tcolorKey.fill(GREEN, leftArrayStartIndex, rightArrayEndIndex + 1);\n\tglobalColorSteps.push(colorKey.slice());\n\tglobalArraySteps.push(globalArray.slice());\n};\n\nconst shiftArrayRightByOne = (array, startIndex, endIndex) => {\n\tfor (let i = endIndex; i >= startIndex; i--) {\n\t\tarray[i + 1] = array[i];\n\t}\n};\nexport default MergeSort;\n","const BLUE = 0,\n\tYELLOW = 1,\n\tPURPLE = 2,\n\tRED = 3,\n\tGREEN = 4,\n\tPINK = 5,\n\tORANGE = 6,\n\tTEAL = 7;\n\n// Global Variables\nlet globalArray = [],\n\tglobalArraySteps = [],\n\tglobalColorSteps = [],\n\tglobalColorKey = [];\n\nconst QuickSort = (array, arraySteps, colorSteps) => {\n\tglobalArray = array;\n\tglobalArraySteps = arraySteps;\n\tglobalColorSteps = colorSteps;\n\tglobalColorKey = [...globalColorSteps[0]];\n\tquickSortHelper(0, array.length - 1);\n\tconsole.log(`sorted array: ${globalArray}`);\n};\n\n// Returns a random pivot index in range [startIndex, endIndex]\nconst getPivotIndex = (startIndex, endIndex) => {\n\treturn Math.floor(Math.random() * (endIndex - startIndex + 1) + startIndex);\n};\n\nconst quickSortHelper = (startIndex, endIndex) => {\n\tif (endIndex - startIndex <= 0) {\n\t\tglobalColorKey[endIndex] = GREEN;\n\t\tglobalColorSteps.push(globalColorKey.slice());\n\t\tglobalArraySteps.push(globalArray.slice());\n\t\treturn;\n\t}\n\tlet pivotIndex = getPivotIndex(startIndex, endIndex),\n\t\tpivotElement = globalArray[pivotIndex],\n\t\tleftPointer = startIndex,\n\t\trightPointer = endIndex - 1;\n\n\t// Add TEAL color for pivot element\n\tlet colorKey = [...globalColorKey];\n\tcolorKey[pivotIndex] = TEAL;\n\tglobalColorSteps.push(colorKey.slice());\n\tglobalArraySteps.push(globalArray.slice());\n\n\t// Add Yellow color to last element and pivot element to signify swapping\n\tcolorKey[pivotIndex] = YELLOW;\n\tcolorKey[endIndex] = YELLOW;\n\tglobalColorSteps.push(colorKey.slice());\n\tglobalArraySteps.push(globalArray.slice());\n\n\t// swap pivot element to the end\n\tswap(globalArray, pivotIndex, endIndex);\n\n\t// Add TEAL color to pivot element throughout the quicksort process\n\tcolorKey = [...globalColorKey];\n\tcolorKey[endIndex] = TEAL;\n\tglobalColorSteps.push(colorKey.slice());\n\tglobalArraySteps.push(globalArray.slice());\n\n\tlet tempColorKey = colorKey.slice();\n\n\twhile (leftPointer <= rightPointer) {\n\t\t// Right pointer is Pink, Left Pointer is Purple\n\t\ttempColorKey = colorKey.slice();\n\t\tcolorKey[leftPointer] = PURPLE;\n\t\tcolorKey[rightPointer] = PINK;\n\t\tglobalColorSteps.push(colorKey.slice());\n\t\tglobalArraySteps.push(globalArray.slice());\n\n\t\tif (globalArray[leftPointer] >= pivotElement) {\n\t\t\t// LeftPointer and rightPointer should be yellow to signify swapping\n\t\t\tcolorKey[leftPointer] = YELLOW;\n\t\t\tcolorKey[rightPointer] = YELLOW;\n\t\t\tglobalColorSteps.push(colorKey.slice());\n\t\t\tglobalArraySteps.push(globalArray.slice());\n\n\t\t\tswap(globalArray, leftPointer, rightPointer);\n\t\t\trightPointer--;\n\t\t} else {\n\t\t\tleftPointer++;\n\t\t}\n\t\tcolorKey = tempColorKey;\n\t}\n\n\t// LeftPointer and EndIndex should be yellow to signify swapping\n\tcolorKey[leftPointer] = YELLOW;\n\tcolorKey[endIndex] = YELLOW;\n\tglobalColorSteps.push(colorKey.slice());\n\tglobalArraySteps.push(globalArray.slice());\n\tcolorKey = tempColorKey;\n\n\t// swap pivot element in its right place\n\tswap(globalArray, leftPointer, endIndex);\n\n\t// Pivot element should be green to signify sorted\n\tcolorKey = [...globalColorKey];\n\tcolorKey[leftPointer] = GREEN;\n\tglobalColorKey[leftPointer] = GREEN;\n\t// left of pivot should be in purple to signify left partition\n\tcolorKey.fill(PURPLE, startIndex, leftPointer);\n\t// right of pivor should be in pink to signify right partition\n\tcolorKey.fill(PINK, leftPointer + 1, endIndex + 1);\n\n\tglobalColorSteps.push(colorKey.slice());\n\tglobalArraySteps.push(globalArray.slice());\n\n\tquickSortHelper(startIndex, leftPointer - 1);\n\tquickSortHelper(leftPointer + 1, endIndex);\n};\n\nconst swap = (array, i, j) => {\n\tconst temp = array[i];\n\tarray[i] = array[j];\n\tarray[j] = temp;\n};\n\nexport default QuickSort;\n","import \"./App.css\";\nimport Bar from \"./components/bar/Bar\";\nimport Navbar from \"./components/nav/Navbar\";\nimport Footer from \"./components/footer/Footer\";\nimport { useState, useEffect } from \"react\";\nimport InsertionSort from \"./algorithms/InsertionSort/InsertionSort\";\nimport MergeSort from \"./algorithms/MergeSort/MergeSort\";\nimport QuickSort from \"./algorithms/QuickSort/QuickSort\";\n\nconst App = () => {\n\t// States\n\tconst [array, setArray] = useState([]);\n\tconst [arraySteps, setArraySteps] = useState([]);\n\tconst [colorSteps, setColorSteps] = useState([]);\n\tconst [arraySize, setArraySize] = useState(50);\n\tconst [currentStep, setCurrentStep] = useState(0);\n\tconst [delay, setDelay] = useState(50);\n\tconst [algorithm, setAlgorithm] = useState(\"Merge Sort\");\n\tconst [timeouts, setTimeouts] = useState([]);\n\tconst [startGeneratingSteps, setStartGeneratingSteps] = useState(false);\n\n\t// returns an array of n numbers where n =arraySize\n\tconst generateRandomArray = () => {\n\t\tlet randomArray = [];\n\t\tfor (let i = 0; i < arraySize; i++) {\n\t\t\trandomArray.push(Math.floor(Math.random() * 100) + 10);\n\t\t}\n\t\treturn randomArray;\n\t};\n\n\t// clear color key and set it to default\n\t// TODO: Refactor this\n\tconst clearKey = () => {\n\t\tlet blankKey = new Array(arraySize).fill(0);\n\t\tsetColorSteps([blankKey]);\n\t};\n\n\t// generates steps\n\t// TODO: Refactor this\n\tconst generateSteps = () => {\n\t\tconsole.log(`generating steps`);\n\t\tlet arr = [...array];\n\t\tlet steps = [array.slice()];\n\t\tlet clrSteps = [...colorSteps];\n\t\tsort(arr, steps, clrSteps);\n\t\tsetArraySteps(steps);\n\t\tsetColorSteps(clrSteps);\n\t\tsetStartGeneratingSteps(false); // after generating steps, set it to false\n\t};\n\n\t// calls the appropriate algorithm to set the sorting steps\n\tconst sort = (array, arraySteps, colorSteps) => {\n\t\t// console.log(`sorting Algorithm: ${algorithm}`);\n\t\t// console.log(`arraysteps: ${arraySteps}`);\n\t\t// console.log(`colorSteps: ${colorSteps}`);\n\t\tswitch (algorithm) {\n\t\t\tcase \"Merge Sort\":\n\t\t\t\tMergeSort(array, arraySteps, colorSteps);\n\t\t\t\tbreak;\n\t\t\tcase \"Quick Sort\":\n\t\t\t\tQuickSort(array, arraySteps, colorSteps);\n\t\t\t\tbreak;\n\t\t\tcase \"Insertion Sort\":\n\t\t\t\tInsertionSort(array, arraySteps, colorSteps);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.error(\"Invalid algorithm selected!\");\n\t\t}\n\t};\n\t// returns the sorting algorithm delay speed using formula\n\t// formula: speed = 500/arraySize\n\tconst getDelay = (arraySize) => {\n\t\treturn Math.floor(1000 / arraySize);\n\t};\n\n\t// Initializes the app by generating random array\n\tconst initialize = () => {\n\t\tconst newArray = generateRandomArray();\n\t\tsetArray(newArray);\n\t\tsetArraySteps([newArray]);\n\t\tsetCurrentStep(0);\n\t\tsetDelay(getDelay(arraySize));\n\t\tclearKey();\n\t\tclearTimeouts();\n\t\tsetStartGeneratingSteps(true); //invoke start generating steps\n\t};\n\n\tconst initialize_with_current_array = () => {\n\t\tconst arrayCopy = array.slice();\n\t\tsetArraySteps([arrayCopy]);\n\t\tsetCurrentStep(0);\n\t\tsetDelay(getDelay(arraySize));\n\t\tclearKey();\n\t\tclearTimeouts();\n\t\tsetStartGeneratingSteps(true); //invoke start generating steps\n\n\t\t//console.log(`inside initialize with current array: ${array}`);\n\t\t// setArraySteps([array]);\n\t\t// setCurrentStep(0);\n\t\t// setDelay(getDelay(arraySize));\n\t\t// clearKey();\n\t\t// clearTimeouts();\n\t\t// generateSteps();\n\t};\n\n\t// change size of random array and corresponding sorting speed\n\tconst handleArraySizeAndSpeedChange = (newArraySize) => {\n\t\tconst newDelay = getDelay(newArraySize);\n\t\tsetArraySize(newArraySize);\n\t\tsetDelay(newDelay);\n\t};\n\n\t// clear timeouts\n\tconst clearTimeouts = () => {\n\t\ttimeouts.forEach((timeout) => clearTimeout(timeout));\n\t\tsetTimeouts([]);\n\t\tconsole.log(`Timeouts cleared...`);\n\t};\n\n\t// start playing sort animation\n\tconst startSorting = () => {\n\t\tlet timeoutsArray = [];\n\t\tlet currStep = currentStep;\n\t\t// If already at sorted state, just return back\n\t\tif (currentStep == arraySteps.length - 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < arraySteps.length; i++) {\n\t\t\tlet timeout = setTimeout(() => {\n\t\t\t\tsetArray([...arraySteps[i]]);\n\t\t\t\tsetCurrentStep(currStep++);\n\t\t\t}, delay * (i + 1));\n\t\t\ttimeoutsArray.push(timeout);\n\t\t}\n\t\tconsole.log(`setting tiemeoutout`);\n\t\tsetTimeouts(timeoutsArray);\n\t};\n\n\t// returns the bar width according to the arraysize\n\t// formula: width = 750/arraySize\n\tconst getBarWidth = () => {\n\t\treturn Math.floor(500 / arraySize);\n\t};\n\n\t// bars jsx object\n\tconst bars = array.map((number, index) => {\n\t\treturn (\n\t\t\t<Bar\n\t\t\t\tkey={index}\n\t\t\t\tindex={index}\n\t\t\t\tlength={number}\n\t\t\t\twidth={getBarWidth()}\n\t\t\t\tcolor={colorSteps[currentStep][index]}\n\t\t\t/>\n\t\t);\n\t});\n\n\tconst pause = () => {\n\t\tconst pausedStep = currentStep;\n\t\tclearTimeouts();\n\t\tsetCurrentStep(pausedStep);\n\t\tsetArray(arraySteps[pausedStep]);\n\t};\n\n\t// When the document loads, initialize with new array\n\tuseEffect(() => {\n\t\tinitialize();\n\t}, [arraySize]);\n\n\t// when the array is done initializing, generate steps\n\tuseEffect(() => {\n\t\tif (startGeneratingSteps) {\n\t\t\tgenerateSteps();\n\t\t}\n\t}, [startGeneratingSteps]);\n\n\t// when the algorithm changes, start generating steps again\n\tuseEffect(() => {\n\t\tinitialize_with_current_array();\n\t}, [algorithm]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Navbar\n\t\t\t\tstartSorting={startSorting}\n\t\t\t\tcurrentStep={currentStep}\n\t\t\t\tgenerateNewArray={initialize}\n\t\t\t\thandleArraySizeAndSpeedChange={handleArraySizeAndSpeedChange}\n\t\t\t\tarraySize={arraySize}\n\t\t\t\talgorithm={algorithm}\n\t\t\t\tsetAlgorithm={setAlgorithm}\n\t\t\t\tsetStartGeneratingSteps={setStartGeneratingSteps}\n\t\t\t/>\n\t\t\t<div className=\"array-display\">{bars}</div>\n\t\t\t<Footer />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}