{"version":3,"sources":["components/colors/Colors.js","components/bar/Bar.js","components/nav/Navbar.js","algorithms/InsertionSort.js","App.js","reportWebVitals.js","index.js"],"names":["Colors","0","1","2","3","4","Bar","props","barStyle","height","length","backgroundColor","color","width","className","style","Navbar","id","Typography","gutterBottom","Slider","value","min","step","max","valueLabelDisplay","aria-labelledby","Button","variant","onClick","generateNewArray","startSorting","InsertionSort","array","arraySteps","colorSteps","colorKey","i","min_idx","push","slice","j","temp","fill","App","useState","setArray","setArraySteps","setColorKey","setColorSteps","arraySize","currentStep","setCurrentStep","delay","timeouts","setTimeouts","startGeneratingSteps","setStartGeneratingSteps","initialize","console","log","newArray","randomArray","Math","floor","random","generateRandomArray","blankKey","Array","clearKey","clearTimeouts","forEach","timeout","clearTimeout","bars","map","number","index","useEffect","arr","steps","clrSteps","generateSteps","timeoutsArray","currStep","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.207adef7.chunk.js","sourcesContent":["const colorMap = {\n\tdarkSystemGray: \"rgb(28, 28, 30)\",\n\tlightSystemBlue: \"rgb(0, 122, 255)\",\n\tsystemBlue: \"rgb(10, 132, 255)\",\n\tlightSystemGreen: \"rgb(52, 199, 89)\",\n\tdarkSystemGreen: \"rgb(48, 209, 88)\",\n\ttextColor: \"white\",\n\tsortedGreen: \"rgb(48, 209, 88)\",\n\tpurple: \"purple\",\n\tred: \"red\",\n\tyellow: \"yellow\",\n};\n\nconst Colors = {\n\t0: colorMap[\"systemBlue\"],\n\t1: colorMap[\"yellow\"],\n\t2: colorMap[\"purple\"],\n\t3: colorMap[\"red\"],\n\t4: colorMap[\"sortedGreen\"],\n};\n\nexport default Colors;\n","import \"./Bar.css\";\nimport Colors from \"../colors/Colors\";\n\nconst Bar = (props) => {\n\tconst barStyle = {\n\t\theight: `${props.length * 0.75}vh`,\n\t\tbackgroundColor: Colors[props.color],\n\t\twidth: `${props.width}px`,\n\t};\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bar\" style={barStyle}>\n\t\t\t\t{props.width > 10 ? props.length : \"\"}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Bar;\n","import { React, useEffect, useState } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\n\nimport \"./Navbar.css\";\n\nconst Navbar = (props) => {\n\t// starts playing the sorting algorithm\n\tconst sortArrayHandler = () => {\n\t\tprops.startSorting();\n\t};\n\n\t// generates a new random array\n\tconst generateNewArrayHandler = () => {\n\t\tprops.generateNewArray();\n\t};\n\n\t// lets the user change size of array and speed of sorting\n\tconst handleArraySizeAndSpeedChange = (event, newValue) => {\n\t\tprops.setValue(newValue);\n\t};\n\n\treturn (\n\t\t<div id=\"nav-bar\">\n\t\t\t<div id=\"title\">\n\t\t\t\t<h1>Sorting Algorithm Visualizer</h1>\n\t\t\t</div>\n\t\t\t<div id=\"toolbar\">\n\t\t\t\t<div>\n\t\t\t\t\t<Typography id=\"non-linear-slider\" gutterBottom>\n\t\t\t\t\t\tArray size & sorting speed\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Slider\n\t\t\t\t\t\tvalue={50}\n\t\t\t\t\t\tmin={5}\n\t\t\t\t\t\tstep={5}\n\t\t\t\t\t\tmax={100}\n\t\t\t\t\t\t// getAriaValueText={valueLabelFormat}\n\t\t\t\t\t\t// valueLabelFormat={valueLabelFormat}\n\t\t\t\t\t\t// onChange={}\n\t\t\t\t\t\tvalueLabelDisplay=\"auto\"\n\t\t\t\t\t\taria-labelledby=\"array size and sorting speed slider\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<Button variant=\"contained\" onClick={generateNewArrayHandler}>\n\t\t\t\t\tGenerate New Array\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\tonClick={sortArrayHandler}\n\t\t\t\t>\n\t\t\t\t\tSort!\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Navbar;\n","const InsertionSort = (array, arraySteps, colorSteps) => {\n\tlet colorKey = [...colorSteps[colorSteps.length - 1]];\n\tfor (let i = 0; i < array.length; i++) {\n\t\tlet min_idx = i;\n\t\tarraySteps.push(array.slice()); // show i as current in yellow\n\t\tcolorKey[i] = 1;\n\t\tcolorSteps.push(colorKey.slice());\n\t\tfor (let j = i + 1; j < array.length; j++) {\n\t\t\tmin_idx = array[j] < array[min_idx] ? j : min_idx;\n\t\t\tarraySteps.push(array.slice()); // show j in purple\n\t\t\tcolorKey[j] = 2;\n\t\t\tcolorSteps.push(colorKey.slice());\n\t\t\tcolorKey[j] = 0; // revert\n\t\t}\n\t\t// swap items\n\t\tarraySteps.push(array.slice()); // before swap\n\t\tcolorKey[i] = 3;\n\t\tcolorKey[min_idx] = 3;\n\t\tcolorSteps.push(colorKey.slice());\n\n\t\tconst temp = array[min_idx];\n\t\tarray[min_idx] = array[i];\n\t\tarray[i] = temp;\n\t\tarraySteps.push(array.slice()); // after swap\n\t\tcolorKey[i] = 4;\n\t\tcolorKey[min_idx] = min_idx != i ? 0 : 3; // revert\n\t\tcolorSteps.push(colorKey.slice());\n\t}\n\tarraySteps.push(array.slice());\n\tcolorSteps.push(colorKey.slice().fill(4));\n};\n\nexport default InsertionSort;\n","import \"./App.css\";\nimport Bar from \"./components/bar/Bar\";\nimport Navbar from \"./components/nav/Navbar\";\nimport { useState, useEffect } from \"react\";\nimport InsertionSort from \"./algorithms/InsertionSort\";\n\nconst App = () => {\n\t// States\n\tconst [array, setArray] = useState([]);\n\tconst [arraySteps, setArraySteps] = useState([]);\n\tconst [colorKey, setColorKey] = useState([]);\n\tconst [colorSteps, setColorSteps] = useState([]);\n\tconst [arraySize, setArraySize] = useState(100);\n\tconst [currentStep, setCurrentStep] = useState(0);\n\tconst [delay, setDelay] = useState(1);\n\tconst [algorithm, setAlgorithm] = useState(\"Insertion Sort\");\n\tconst [timeouts, setTimeouts] = useState([]);\n\tconst [startGeneratingSteps, setStartGeneratingSteps] = useState(false);\n\n\t// returns an array of n numbers where n =arraySize\n\tconst generateRandomArray = () => {\n\t\tlet randomArray = [];\n\t\tfor (let i = 0; i < arraySize; i++) {\n\t\t\t// let num = Math.floor(Math.random() * 100);\n\n\t\t\trandomArray.push(Math.floor(Math.random() * 100) + 10);\n\t\t}\n\t\treturn randomArray;\n\t};\n\n\t// clear color key and set it to default\n\t// TODO: Refactor this\n\tconst clearKey = () => {\n\t\tlet blankKey = new Array(arraySize).fill(0);\n\t\tsetColorKey(blankKey);\n\t\tsetColorSteps([blankKey]);\n\t};\n\n\t// generates steps\n\t// TODO: Refactor this\n\tconst generateSteps = () => {\n\t\tconsole.log(\"Generating steps...\");\n\t\tlet arr = [...array];\n\t\tlet steps = [...arraySteps];\n\t\tlet clrSteps = [...colorSteps];\n\t\tInsertionSort(arr, steps, clrSteps);\n\t\tsetArraySteps(steps);\n\t\tsetColorSteps(clrSteps);\n\t\tsetStartGeneratingSteps(false); // after generating steps, set it to false\n\t};\n\n\t// Initializes the app by generating random array\n\tconst initialize = () => {\n\t\tconsole.log(\"Initializing...\");\n\t\tconst newArray = generateRandomArray();\n\t\tsetArray(newArray);\n\t\tsetArraySteps([newArray]);\n\t\tsetCurrentStep(0);\n\t\tclearKey();\n\t\tclearTimeouts();\n\t\tsetStartGeneratingSteps(true); //invoke start generating steps\n\t};\n\n\t// clear timeouts\n\tconst clearTimeouts = () => {\n\t\ttimeouts.forEach((timeout) => clearTimeout(timeout));\n\t\tsetTimeouts([]);\n\t};\n\n\t// start playing sort animation\n\tconst startSorting = () => {\n\t\tlet timeoutsArray = [];\n\t\tlet currStep = currentStep;\n\t\t// If already at sorted state, just return back\n\t\tif (currentStep == arraySteps.length - 1) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < arraySteps.length; i++) {\n\t\t\tlet timeout = setTimeout(() => {\n\t\t\t\tsetArray([...arraySteps[i]]);\n\t\t\t\tsetCurrentStep(currStep++);\n\t\t\t}, delay * (i + 1));\n\t\t\ttimeoutsArray.push(timeout);\n\t\t}\n\t\tsetTimeouts(timeoutsArray);\n\t};\n\n\t// bars jsx object\n\tconst bars = array.map((number, index) => {\n\t\treturn (\n\t\t\t<Bar\n\t\t\t\tkey={index}\n\t\t\t\tindex={index}\n\t\t\t\tlength={number}\n\t\t\t\twidth={5}\n\t\t\t\tcolor={colorSteps[currentStep][index]}\n\t\t\t/>\n\t\t);\n\t});\n\n\tconst pause = () => {\n\t\tconst pausedStep = currentStep;\n\t\tclearTimeouts();\n\t\tsetCurrentStep(pausedStep);\n\t\tsetArray(arraySteps[pausedStep]);\n\t};\n\n\t// When the document loads, initialize with new array\n\tuseEffect(() => {\n\t\tinitialize();\n\t}, []);\n\n\t// when the array is done initializing, generate steps\n\tuseEffect(() => {\n\t\tif (startGeneratingSteps) {\n\t\t\tgenerateSteps();\n\t\t}\n\t}, [startGeneratingSteps]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Navbar\n\t\t\t\tstartSorting={startSorting}\n\t\t\t\tcurrentStep={currentStep}\n\t\t\t\tgenerateNewArray={initialize}\n\t\t\t/>\n\t\t\t<div className=\"array-display\">{bars}</div>\n\n\t\t\t{/* <button onClick={initialize}>Generate new array</button>\n\t\t\t<button onClick={pause}> Pause</button> */}\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}