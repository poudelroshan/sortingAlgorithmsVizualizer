{"version":3,"sources":["components/colors/Colors.js","components/bar/Bar.js","components/nav/Navbar.js","components/footer/Footer.js","algorithms/InsertionSort.js","App.js","reportWebVitals.js","index.js"],"names":["Colors","0","1","2","3","4","Bar","props","barStyle","height","length","backgroundColor","color","width","className","style","Navbar","makeStyles","button","useStyles","id","Typography","gutterBottom","Slider","value","arraySize","min","step","max","onChange","event","newValue","handleArraySizeAndSpeedChange","valueLabelDisplay","aria-labelledby","Button","variant","onClick","generateNewArray","ToggleButtonGroup","algorithm","exclusive","setAlgorithm","aria-label","ToggleButton","startSorting","Footer","href","InsertionSort","array","arraySteps","colorSteps","colorKey","i","min_idx","push","slice","j","temp","fill","App","useState","setArray","setArraySteps","setColorSteps","setArraySize","currentStep","setCurrentStep","delay","setDelay","timeouts","setTimeouts","startGeneratingSteps","setStartGeneratingSteps","getDelay","Math","floor","initialize","console","log","newArray","randomArray","random","generateRandomArray","blankKey","Array","clearKey","clearTimeouts","forEach","timeout","clearTimeout","bars","map","number","index","useEffect","arr","steps","clrSteps","generateSteps","timeoutsArray","currStep","setTimeout","newArraySize","newDelay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.297b6ef2.chunk.js","sourcesContent":["const colorMap = {\n\tdarkSystemGray: \"rgb(28, 28, 30)\",\n\tlightSystemBlue: \"rgb(0, 122, 255)\",\n\tsystemBlue: \"rgb(10, 132, 255)\",\n\tlightSystemGreen: \"rgb(52, 199, 89)\",\n\tdarkSystemGreen: \"rgb(48, 209, 88)\",\n\ttextColor: \"white\",\n\tsortedGreen: \"rgb(48, 209, 88)\",\n\tpurple: \"purple\",\n\tred: \"red\",\n\tyellow: \"yellow\",\n};\n\nconst Colors = {\n\t0: colorMap[\"systemBlue\"],\n\t1: colorMap[\"yellow\"],\n\t2: colorMap[\"purple\"],\n\t3: colorMap[\"red\"],\n\t4: colorMap[\"sortedGreen\"],\n};\n\nexport default Colors;\n","import \"./Bar.css\";\nimport Colors from \"../colors/Colors\";\n\nconst Bar = (props) => {\n\tconst barStyle = {\n\t\theight: `${props.length * 0.7}vh`,\n\t\tbackgroundColor: Colors[props.color],\n\t\twidth: `${props.width}px`,\n\t};\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bar\" style={barStyle}>\n\t\t\t\t{props.width >= 25 ? props.length : \"\"}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Bar;\n","import { React } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport ToggleButton from \"@material-ui/core/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/core/ToggleButtonGroup\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nimport \"./Navbar.css\";\n\nconst Navbar = (props) => {\n\t// starts playing the sorting algorithm\n\tconst sortArrayHandler = () => {\n\t\tprops.startSorting();\n\t};\n\n\t// generates a new random array\n\tconst generateNewArrayHandler = () => {\n\t\tprops.generateNewArray();\n\t};\n\n\t// lets the user change size of array and speed of sorting\n\tconst handleArraySizeAndSpeedChange = (event, newValue) => {\n\t\tprops.handleArraySizeAndSpeedChange(newValue);\n\t};\n\n\t// handle changing of algorithm\n\tconst handleSortingAlgorithmChange = (event, newValue) => {\n\t\tprops.setAlgorithm(newValue);\n\t};\n\n\t// custom CSS for MUI buttons\n\tconst useStyles = makeStyles({\n\t\tbutton: {\n\t\t\tbackgroundColor: \"green\",\n\t\t\tcolor: \"#green\",\n\t\t\t\"&:hover\": {\n\t\t\t\tcolor: \"red\",\n\t\t\t},\n\t\t\t\"&:click\": {\n\t\t\t\tcolor: \"blue\",\n\t\t\t},\n\t\t},\n\t});\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<div id=\"nav-bar\">\n\t\t\t<div id=\"title\">\n\t\t\t\t<h1>Sorting Algorithm Visualizer</h1>\n\t\t\t</div>\n\t\t\t<div id=\"toolbar\">\n\t\t\t\t<div>\n\t\t\t\t\t<Typography gutterBottom>Array size & sorting speed</Typography>\n\t\t\t\t\t<Slider\n\t\t\t\t\t\tvalue={props.arraySize}\n\t\t\t\t\t\tmin={5}\n\t\t\t\t\t\tstep={5}\n\t\t\t\t\t\tmax={100}\n\t\t\t\t\t\tonChange={handleArraySizeAndSpeedChange}\n\t\t\t\t\t\tvalueLabelDisplay=\"auto\"\n\t\t\t\t\t\taria-labelledby=\"array size and sorting speed slider\"\n\t\t\t\t\t\tid=\"non-linear-slider\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{/* <Divider orientation=\"vertical\" variant=\"fullWidth\" light=\"True\" /> */}\n\t\t\t\t<div className=\"separator\" />\n\n\t\t\t\t<Button variant=\"text\" color=\"info\" onClick={generateNewArrayHandler}>\n\t\t\t\t\tGenerate New Array\n\t\t\t\t</Button>\n\n\t\t\t\t<div className=\"separator\" />\n\t\t\t\t<ToggleButtonGroup\n\t\t\t\t\tvalue={props.algorithm}\n\t\t\t\t\texclusive\n\t\t\t\t\tonChange={handleSortingAlgorithmChange}\n\t\t\t\t\taria-label=\"sorting algorithm\"\n\t\t\t\t>\n\t\t\t\t\t<ToggleButton value=\"Insertion Sort\" aria-label=\"Insertion Sort\">\n\t\t\t\t\t\tInsertion Sort\n\t\t\t\t\t</ToggleButton>\n\t\t\t\t\t<ToggleButton value=\"Merge Sort\" aria-label=\"Merge Sort\">\n\t\t\t\t\t\tMerge Sort\n\t\t\t\t\t</ToggleButton>\n\t\t\t\t\t<ToggleButton value=\"Quick Sort\" aria-label=\"Quick Sort\">\n\t\t\t\t\t\tQuick Sort\n\t\t\t\t\t</ToggleButton>\n\t\t\t\t</ToggleButtonGroup>\n\t\t\t\t<div className=\"separator\" />\n\n\t\t\t\t<Button variant=\"text\" color=\"secondary\" onClick={sortArrayHandler}>\n\t\t\t\t\tSort!\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Navbar;\n","import { React } from \"react\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\n\nimport \"./Footer.css\";\n\nconst Footer = (props) => {\n\treturn (\n\t\t<div id=\"footer\">\n\t\t\t<div>\n\t\t\t\tPlease note that this project is still under construction. The\n\t\t\t\timplementation of Merge and Quick Sort has not been completed yet.\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\tMade with <FavoriteIcon color=\"warning\" /> by\n\t\t\t\t<a href=\"https://iamroshanpoudel.com\"> Roshan</a> using React.js and\n\t\t\t\tMaterial UI\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Footer;\n","const BLUE = 0,\n\tYELLOW = 1,\n\tPURPLE = 2,\n\tRED = 3,\n\tGREEN = 4;\n\nconst InsertionSort = (array, arraySteps, colorSteps) => {\n\tlet colorKey = [...colorSteps[0]];\n\tfor (let i = 0; i < array.length; i++) {\n\t\tlet min_idx = i;\n\t\tarraySteps.push(array.slice()); // show i as current in yellow\n\t\tcolorKey[i] = YELLOW;\n\t\tcolorSteps.push(colorKey.slice());\n\t\tfor (let j = i + 1; j < array.length; j++) {\n\t\t\tmin_idx = array[j] < array[min_idx] ? j : min_idx;\n\t\t\tarraySteps.push(array.slice()); // show j in purple\n\t\t\tcolorKey[j] = PURPLE;\n\t\t\tcolorSteps.push(colorKey.slice());\n\t\t\tcolorKey[j] = BLUE; // revert\n\t\t}\n\t\t// swap items\n\t\tarraySteps.push(array.slice()); // before swap\n\t\tcolorKey[i] = RED;\n\t\tcolorKey[min_idx] = RED;\n\t\tcolorSteps.push(colorKey.slice());\n\n\t\tconst temp = array[min_idx];\n\t\tarray[min_idx] = array[i];\n\t\tarray[i] = temp;\n\t\tarraySteps.push(array.slice()); // after swap\n\t\tcolorKey[i] = GREEN;\n\t\tcolorKey[min_idx] = min_idx != i ? BLUE : GREEN; // revert\n\t\tcolorSteps.push(colorKey.slice());\n\t}\n\tarraySteps.push(array.slice());\n\tcolorSteps.push(colorKey.slice().fill(4));\n};\n\nexport default InsertionSort;\n","import \"./App.css\";\nimport Bar from \"./components/bar/Bar\";\nimport Navbar from \"./components/nav/Navbar\";\nimport Footer from \"./components/footer/Footer\";\nimport { useState, useEffect } from \"react\";\nimport InsertionSort from \"./algorithms/InsertionSort\";\nimport MergeSort from \"./algorithms/MergeSort/MergeSort\";\nconst App = () => {\n\t// States\n\tconst [array, setArray] = useState([]);\n\tconst [arraySteps, setArraySteps] = useState([]);\n\tconst [colorSteps, setColorSteps] = useState([]);\n\tconst [arraySize, setArraySize] = useState(50);\n\tconst [currentStep, setCurrentStep] = useState(0);\n\tconst [delay, setDelay] = useState(50);\n\tconst [algorithm, setAlgorithm] = useState(\"Insertion Sort\");\n\tconst [timeouts, setTimeouts] = useState([]);\n\tconst [startGeneratingSteps, setStartGeneratingSteps] = useState(false);\n\n\t// returns an array of n numbers where n =arraySize\n\tconst generateRandomArray = () => {\n\t\tlet randomArray = [];\n\t\tfor (let i = 0; i < arraySize; i++) {\n\t\t\trandomArray.push(Math.floor(Math.random() * 100) + 10);\n\t\t}\n\t\treturn randomArray;\n\t};\n\n\t// clear color key and set it to default\n\t// TODO: Refactor this\n\tconst clearKey = () => {\n\t\tlet blankKey = new Array(arraySize).fill(0);\n\t\tsetColorSteps([blankKey]);\n\t};\n\n\t// generates steps\n\t// TODO: Refactor this\n\tconst generateSteps = () => {\n\t\tlet arr = [...array];\n\t\tlet steps = [...arraySteps];\n\t\tlet clrSteps = [...colorSteps];\n\t\tInsertionSort(arr, steps, clrSteps);\n\t\tsetArraySteps(steps);\n\t\tsetColorSteps(clrSteps);\n\t\tsetStartGeneratingSteps(false); // after generating steps, set it to false\n\t};\n\n\t// returns the sorting algorithm delay speed using formula\n\t// formula: speed = 500/arraySize\n\tconst getDelay = (arraySize) => {\n\t\treturn Math.floor(500 / arraySize);\n\t};\n\n\t// Initializes the app by generating random array\n\tconst initialize = () => {\n\t\tconsole.log(\"Initializing...\");\n\t\tconst newArray = generateRandomArray();\n\t\tsetArray(newArray);\n\t\tsetArraySteps([newArray]);\n\t\tsetCurrentStep(0);\n\t\tsetDelay(getDelay(arraySize));\n\t\tclearKey();\n\t\tclearTimeouts();\n\t\tsetStartGeneratingSteps(true); //invoke start generating steps\n\t};\n\n\t// change size of random array and corresponding sorting speed\n\tconst handleArraySizeAndSpeedChange = (newArraySize) => {\n\t\tconst newDelay = getDelay(newArraySize);\n\t\tsetArraySize(newArraySize);\n\t\tsetDelay(newDelay);\n\t};\n\n\t// clear timeouts\n\tconst clearTimeouts = () => {\n\t\ttimeouts.forEach((timeout) => clearTimeout(timeout));\n\t\tsetTimeouts([]);\n\t};\n\n\t// start playing sort animation\n\tconst startSorting = () => {\n\t\tlet timeoutsArray = [];\n\t\tlet currStep = currentStep;\n\t\t// If already at sorted state, just return back\n\t\tif (currentStep == arraySteps.length - 1) {\n\t\t\treturn false;\n\t\t}\n\t\tconsole.log(delay);\n\t\tfor (let i = 0; i < arraySteps.length; i++) {\n\t\t\tlet timeout = setTimeout(() => {\n\t\t\t\tsetArray([...arraySteps[i]]);\n\t\t\t\tsetCurrentStep(currStep++);\n\t\t\t}, delay * (i + 1));\n\t\t\ttimeoutsArray.push(timeout);\n\t\t}\n\t\tsetTimeouts(timeoutsArray);\n\t};\n\n\t// returns the bar width according to the arraysize\n\t// formula: width = 750/arraySize\n\tconst getBarWidth = () => {\n\t\treturn Math.floor(500 / arraySize);\n\t};\n\n\t// bars jsx object\n\tconst bars = array.map((number, index) => {\n\t\treturn (\n\t\t\t<Bar\n\t\t\t\tkey={index}\n\t\t\t\tindex={index}\n\t\t\t\tlength={number}\n\t\t\t\twidth={getBarWidth()}\n\t\t\t\tcolor={colorSteps[currentStep][index]}\n\t\t\t/>\n\t\t);\n\t});\n\n\tconst pause = () => {\n\t\tconst pausedStep = currentStep;\n\t\tclearTimeouts();\n\t\tsetCurrentStep(pausedStep);\n\t\tsetArray(arraySteps[pausedStep]);\n\t};\n\n\t// When the document loads, initialize with new array\n\tuseEffect(() => {\n\t\tinitialize();\n\t}, [arraySize]);\n\n\t// when the array is done initializing, generate steps\n\tuseEffect(() => {\n\t\tif (startGeneratingSteps) {\n\t\t\tgenerateSteps();\n\t\t}\n\t}, [startGeneratingSteps]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Navbar\n\t\t\t\tstartSorting={startSorting}\n\t\t\t\tcurrentStep={currentStep}\n\t\t\t\tgenerateNewArray={initialize}\n\t\t\t\thandleArraySizeAndSpeedChange={handleArraySizeAndSpeedChange}\n\t\t\t\tarraySize={arraySize}\n\t\t\t\talgorithm={algorithm}\n\t\t\t\tsetAlgorithm={setAlgorithm}\n\t\t\t/>\n\t\t\t<div className=\"array-display\">{bars}</div>\n\t\t\t<Footer />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}