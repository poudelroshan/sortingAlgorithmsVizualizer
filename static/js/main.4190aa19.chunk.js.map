{"version":3,"sources":["components/colors/Colors.js","components/bar/Bar.js","components/nav/Navbar.js","components/footer/Footer.js","algorithms/MergeSort/MergeSort.js","App.js","reportWebVitals.js","index.js"],"names":["Colors","0","1","2","3","4","5","6","Bar","props","barStyle","height","length","backgroundColor","color","width","className","style","Navbar","makeStyles","button","useStyles","id","Typography","gutterBottom","Slider","value","arraySize","min","step","max","onChange","event","newValue","handleArraySizeAndSpeedChange","valueLabelDisplay","aria-labelledby","Button","variant","onClick","generateNewArray","ToggleButtonGroup","algorithm","exclusive","setAlgorithm","aria-label","ToggleButton","startSorting","Footer","href","globalArray","globalArraySteps","globalColorSteps","mergeSortHelper","startIndex","endIndex","leftArrayStartIndex","leftArrayEndIndex","Math","floor","rightArrayStartIndex","rightArrayEndIndex","merge","colorKey","fill","push","slice","writePointer","rightArrayPointer","colorKeyCopy","temp","shiftArrayRightByOne","array","i","MergeSort","arraySteps","colorSteps","console","log","App","useState","setArray","setArraySteps","setColorSteps","setArraySize","currentStep","setCurrentStep","delay","setDelay","timeouts","setTimeouts","startGeneratingSteps","setStartGeneratingSteps","getDelay","initialize","newArray","randomArray","random","generateRandomArray","blankKey","Array","clearKey","clearTimeouts","forEach","timeout","clearTimeout","bars","map","number","index","useEffect","arr","steps","clrSteps","generateSteps","timeoutsArray","currStep","setTimeout","newArraySize","newDelay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4190aa19.chunk.js","sourcesContent":["const colorMap = {\n\tdarkSystemGray: \"rgb(28, 28, 30)\",\n\tlightSystemBlue: \"rgb(0, 122, 255)\",\n\tsystemBlue: \"rgb(10, 132, 255)\",\n\tlightSystemGreen: \"rgb(52, 199, 89)\",\n\tdarkSystemGreen: \"rgb(48, 209, 88)\",\n\ttextColor: \"white\",\n\tsortedGreen: \"rgb(48, 209, 88)\",\n\tpurple: \"#5e35b1\",\n\tpink: \"#d81b60\",\n\tred: \"red\",\n\tyellow: \"yellow\",\n\torange: \"#f44336\",\n};\n\nconst Colors = {\n\t0: colorMap[\"systemBlue\"],\n\t1: colorMap[\"yellow\"],\n\t2: colorMap[\"purple\"],\n\t3: colorMap[\"red\"],\n\t4: colorMap[\"sortedGreen\"],\n\t5: colorMap[\"pink\"],\n\t6: colorMap[\"orange\"],\n};\n\nexport default Colors;\n","import \"./Bar.css\";\nimport Colors from \"../colors/Colors\";\n\nconst Bar = (props) => {\n\tconst barStyle = {\n\t\theight: `${props.length * 0.65}vh`,\n\t\tbackgroundColor: Colors[props.color],\n\t\twidth: `${props.width}px`,\n\t};\n\treturn (\n\t\t<>\n\t\t\t<div className=\"bar\" style={barStyle}>\n\t\t\t\t{props.width >= 25 ? props.length : \"\"}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Bar;\n","import { React } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport ToggleButton from \"@material-ui/core/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/core/ToggleButtonGroup\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nimport \"./Navbar.css\";\n\nconst Navbar = (props) => {\n\t// starts playing the sorting algorithm\n\tconst sortArrayHandler = () => {\n\t\tprops.startSorting();\n\t};\n\n\t// generates a new random array\n\tconst generateNewArrayHandler = () => {\n\t\tprops.generateNewArray();\n\t};\n\n\t// lets the user change size of array and speed of sorting\n\tconst handleArraySizeAndSpeedChange = (event, newValue) => {\n\t\tprops.handleArraySizeAndSpeedChange(newValue);\n\t};\n\n\t// handle changing of algorithm\n\tconst handleSortingAlgorithmChange = (event, newValue) => {\n\t\tprops.setAlgorithm(newValue);\n\t};\n\n\t// custom CSS for MUI buttons\n\tconst useStyles = makeStyles({\n\t\tbutton: {\n\t\t\tbackgroundColor: \"green\",\n\t\t\tcolor: \"#green\",\n\t\t\t\"&:hover\": {\n\t\t\t\tcolor: \"red\",\n\t\t\t},\n\t\t\t\"&:click\": {\n\t\t\t\tcolor: \"blue\",\n\t\t\t},\n\t\t},\n\t});\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<div id=\"nav-bar\">\n\t\t\t<div id=\"title\">\n\t\t\t\t<h1>Sorting Algorithm Visualizer</h1>\n\t\t\t</div>\n\t\t\t<div id=\"toolbar\">\n\t\t\t\t<div>\n\t\t\t\t\t<Typography gutterBottom>Array size & sorting speed</Typography>\n\t\t\t\t\t<Slider\n\t\t\t\t\t\tvalue={props.arraySize}\n\t\t\t\t\t\tmin={5}\n\t\t\t\t\t\tstep={5}\n\t\t\t\t\t\tmax={100}\n\t\t\t\t\t\tonChange={handleArraySizeAndSpeedChange}\n\t\t\t\t\t\tvalueLabelDisplay=\"auto\"\n\t\t\t\t\t\taria-labelledby=\"array size and sorting speed slider\"\n\t\t\t\t\t\tid=\"non-linear-slider\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{/* <Divider orientation=\"vertical\" variant=\"fullWidth\" light=\"True\" /> */}\n\t\t\t\t<div className=\"separator\" />\n\n\t\t\t\t<Button variant=\"text\" color=\"info\" onClick={generateNewArrayHandler}>\n\t\t\t\t\tGenerate New Array\n\t\t\t\t</Button>\n\n\t\t\t\t<div className=\"separator\" />\n\t\t\t\t<ToggleButtonGroup\n\t\t\t\t\tvalue={props.algorithm}\n\t\t\t\t\texclusive\n\t\t\t\t\tonChange={handleSortingAlgorithmChange}\n\t\t\t\t\taria-label=\"sorting algorithm\"\n\t\t\t\t>\n\t\t\t\t\t<ToggleButton value=\"Insertion Sort\" aria-label=\"Insertion Sort\">\n\t\t\t\t\t\tInsertion Sort\n\t\t\t\t\t</ToggleButton>\n\t\t\t\t\t<ToggleButton value=\"Merge Sort\" aria-label=\"Merge Sort\">\n\t\t\t\t\t\tMerge Sort\n\t\t\t\t\t</ToggleButton>\n\t\t\t\t\t<ToggleButton value=\"Quick Sort\" aria-label=\"Quick Sort\">\n\t\t\t\t\t\tQuick Sort\n\t\t\t\t\t</ToggleButton>\n\t\t\t\t</ToggleButtonGroup>\n\t\t\t\t<div className=\"separator\" />\n\n\t\t\t\t<Button variant=\"text\" color=\"secondary\" onClick={sortArrayHandler}>\n\t\t\t\t\tSort!\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Navbar;\n","import { React } from \"react\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\n\nimport \"./Footer.css\";\n\nconst Footer = (props) => {\n\treturn (\n\t\t<div id=\"footer\">\n\t\t\t<div>\n\t\t\t\tMade with <FavoriteIcon color=\"warning\" /> by{\" \"}\n\t\t\t\t<a href=\"https://iamroshanpoudel.com\">Roshan Poudel</a> using React.js,\n\t\t\t\tMaterial UI, and Github Pages\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Footer;\n","const BLUE = 0,\n\tYELLOW = 1,\n\tPURPLE = 2,\n\tRED = 3,\n\tGREEN = 4,\n\tPINK = 5,\n\tORANGE = 6;\n\n// Global Variables\nlet globalArray = [],\n\tglobalArraySteps = [],\n\tglobalColorSteps = [];\n\nconst MergeSort = (array, arraySteps, colorSteps) => {\n\tglobalArray = array;\n\tglobalArraySteps = arraySteps;\n\tglobalColorSteps = colorSteps;\n\tmergeSortHelper(0, array.length - 1);\n\tconsole.log(\"After sort\");\n\tconsole.log(colorSteps);\n\tconsole.log(array);\n};\n\nconst mergeSortHelper = (startIndex, endIndex) => {\n\tif (endIndex - startIndex <= 0) return;\n\tconst midIndex = Math.floor((endIndex - startIndex) / 2);\n\tconst leftArrayStartIndex = startIndex,\n\t\tleftArrayEndIndex = startIndex + midIndex,\n\t\trightArrayStartIndex = leftArrayEndIndex + 1,\n\t\trightArrayEndIndex = endIndex;\n\n\tmergeSortHelper(leftArrayStartIndex, leftArrayEndIndex);\n\tmergeSortHelper(rightArrayStartIndex, rightArrayEndIndex);\n\tmerge(leftArrayStartIndex, rightArrayStartIndex, rightArrayEndIndex);\n};\n\nconst merge = (\n\tleftArrayStartIndex,\n\trightArrayStartIndex,\n\trightArrayEndIndex\n) => {\n\t// Add Purple color for left array, pink for right array\n\tlet colorKey = [...globalColorSteps[0]];\n\tcolorKey.fill(PURPLE, leftArrayStartIndex, rightArrayStartIndex);\n\tcolorKey.fill(PINK, rightArrayStartIndex, rightArrayEndIndex + 1);\n\tglobalColorSteps.push(colorKey.slice());\n\tglobalArraySteps.push(globalArray.slice());\n\n\tlet writePointer = leftArrayStartIndex,\n\t\trightArrayPointer = rightArrayStartIndex;\n\twhile (\n\t\twritePointer <= rightArrayPointer &&\n\t\trightArrayPointer <= rightArrayEndIndex\n\t) {\n\t\t// Add orange color for writePointer and rightPointer\n\t\t// Orange color == items being compared\n\t\t// Other left and right array will have same color as above\n\t\tconst colorKeyCopy = colorKey.slice();\n\t\tcolorKey[writePointer] = YELLOW;\n\t\tcolorKey[rightArrayPointer] = YELLOW;\n\t\tglobalColorSteps.push(colorKey.slice());\n\t\tglobalArraySteps.push(globalArray.slice());\n\t\t// Revert the orange colors for next iteration\n\t\tcolorKey = colorKeyCopy;\n\n\t\tif (globalArray[writePointer] <= globalArray[rightArrayPointer]) {\n\t\t\t// Sorted half should be green\n\t\t\tcolorKey[writePointer] = GREEN;\n\t\t\twritePointer++;\n\t\t} else {\n\t\t\tconst temp = globalArray[rightArrayPointer];\n\t\t\tshiftArrayRightByOne(globalArray, writePointer, rightArrayPointer - 1);\n\t\t\tglobalArray[writePointer] = temp;\n\t\t\t// Item at writePointer is sorted, so green\n\t\t\tcolorKey[writePointer] = GREEN;\n\t\t\twritePointer++;\n\t\t\trightArrayPointer++;\n\t\t\tcolorKey.fill(PURPLE, writePointer, rightArrayPointer);\n\t\t}\n\t\t// Add color and steps array for current iteration\n\t\tglobalColorSteps.push(colorKey.slice());\n\t\tglobalArraySteps.push(globalArray.slice());\n\t}\n\t// At the end, add green color to the merged array\n\tcolorKey.fill(GREEN, leftArrayStartIndex, rightArrayEndIndex + 1);\n\tglobalColorSteps.push(colorKey.slice());\n\tglobalArraySteps.push(globalArray.slice());\n};\n\nconst shiftArrayRightByOne = (array, startIndex, endIndex) => {\n\tfor (let i = endIndex; i >= startIndex; i--) {\n\t\tarray[i + 1] = array[i];\n\t}\n};\nexport default MergeSort;\n","import \"./App.css\";\nimport Bar from \"./components/bar/Bar\";\nimport Navbar from \"./components/nav/Navbar\";\nimport Footer from \"./components/footer/Footer\";\nimport { useState, useEffect } from \"react\";\nimport InsertionSort from \"./algorithms/InsertionSort\";\nimport MergeSort from \"./algorithms/MergeSort/MergeSort\";\nconst App = () => {\n\t// States\n\tconst [array, setArray] = useState([]);\n\tconst [arraySteps, setArraySteps] = useState([]);\n\tconst [colorSteps, setColorSteps] = useState([]);\n\tconst [arraySize, setArraySize] = useState(50);\n\tconst [currentStep, setCurrentStep] = useState(0);\n\tconst [delay, setDelay] = useState(50);\n\tconst [algorithm, setAlgorithm] = useState(\"Insertion Sort\");\n\tconst [timeouts, setTimeouts] = useState([]);\n\tconst [startGeneratingSteps, setStartGeneratingSteps] = useState(false);\n\n\t// returns an array of n numbers where n =arraySize\n\tconst generateRandomArray = () => {\n\t\tlet randomArray = [];\n\t\tfor (let i = 0; i < arraySize; i++) {\n\t\t\trandomArray.push(Math.floor(Math.random() * 100) + 10);\n\t\t}\n\t\t// TODO: Remove next line after testing purposes\n\t\t// randomArray = [42, 35, 28, 20, 37, 30, 101, 25, 49, 13];\n\t\treturn randomArray;\n\t};\n\n\t// clear color key and set it to default\n\t// TODO: Refactor this\n\tconst clearKey = () => {\n\t\tlet blankKey = new Array(arraySize).fill(0);\n\t\tsetColorSteps([blankKey]);\n\t};\n\n\t// generates steps\n\t// TODO: Refactor this\n\tconst generateSteps = () => {\n\t\tlet arr = [...array];\n\t\tlet steps = [...arraySteps];\n\t\tlet clrSteps = [...colorSteps];\n\t\tMergeSort(arr, steps, clrSteps);\n\t\tsetArraySteps(steps);\n\t\tsetColorSteps(clrSteps);\n\t\tsetStartGeneratingSteps(false); // after generating steps, set it to false\n\t};\n\n\t// returns the sorting algorithm delay speed using formula\n\t// formula: speed = 500/arraySize\n\tconst getDelay = (arraySize) => {\n\t\treturn Math.floor(1000 / arraySize);\n\t};\n\n\t// Initializes the app by generating random array\n\tconst initialize = () => {\n\t\tconsole.log(\"Initializing...\");\n\t\tconst newArray = generateRandomArray();\n\t\tsetArray(newArray);\n\t\tsetArraySteps([newArray]);\n\t\tsetCurrentStep(0);\n\t\tsetDelay(getDelay(arraySize));\n\t\tclearKey();\n\t\tclearTimeouts();\n\t\tsetStartGeneratingSteps(true); //invoke start generating steps\n\t};\n\n\t// change size of random array and corresponding sorting speed\n\tconst handleArraySizeAndSpeedChange = (newArraySize) => {\n\t\tconst newDelay = getDelay(newArraySize);\n\t\tsetArraySize(newArraySize);\n\t\tsetDelay(newDelay);\n\t};\n\n\t// clear timeouts\n\tconst clearTimeouts = () => {\n\t\ttimeouts.forEach((timeout) => clearTimeout(timeout));\n\t\tsetTimeouts([]);\n\t};\n\n\t// start playing sort animation\n\tconst startSorting = () => {\n\t\tlet timeoutsArray = [];\n\t\tlet currStep = currentStep;\n\t\t// If already at sorted state, just return back\n\t\tif (currentStep == arraySteps.length - 1) {\n\t\t\treturn false;\n\t\t}\n\t\tconsole.log(delay);\n\t\tfor (let i = 0; i < arraySteps.length; i++) {\n\t\t\tlet timeout = setTimeout(() => {\n\t\t\t\tsetArray([...arraySteps[i]]);\n\t\t\t\tsetCurrentStep(currStep++);\n\t\t\t}, delay * (i + 1));\n\t\t\ttimeoutsArray.push(timeout);\n\t\t}\n\t\tsetTimeouts(timeoutsArray);\n\t};\n\n\t// returns the bar width according to the arraysize\n\t// formula: width = 750/arraySize\n\tconst getBarWidth = () => {\n\t\treturn Math.floor(500 / arraySize);\n\t};\n\n\t// bars jsx object\n\tconst bars = array.map((number, index) => {\n\t\treturn (\n\t\t\t<Bar\n\t\t\t\tkey={index}\n\t\t\t\tindex={index}\n\t\t\t\tlength={number}\n\t\t\t\twidth={getBarWidth()}\n\t\t\t\tcolor={colorSteps[currentStep][index]}\n\t\t\t/>\n\t\t);\n\t});\n\n\tconst pause = () => {\n\t\tconst pausedStep = currentStep;\n\t\tclearTimeouts();\n\t\tsetCurrentStep(pausedStep);\n\t\tsetArray(arraySteps[pausedStep]);\n\t};\n\n\t// When the document loads, initialize with new array\n\tuseEffect(() => {\n\t\tinitialize();\n\t}, [arraySize]);\n\n\t// when the array is done initializing, generate steps\n\tuseEffect(() => {\n\t\tif (startGeneratingSteps) {\n\t\t\tgenerateSteps();\n\t\t}\n\t}, [startGeneratingSteps]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Navbar\n\t\t\t\tstartSorting={startSorting}\n\t\t\t\tcurrentStep={currentStep}\n\t\t\t\tgenerateNewArray={initialize}\n\t\t\t\thandleArraySizeAndSpeedChange={handleArraySizeAndSpeedChange}\n\t\t\t\tarraySize={arraySize}\n\t\t\t\talgorithm={algorithm}\n\t\t\t\tsetAlgorithm={setAlgorithm}\n\t\t\t/>\n\t\t\t<div className=\"array-display\">{bars}</div>\n\t\t\t<Footer />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}